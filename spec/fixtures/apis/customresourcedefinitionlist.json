{
  "kind": "CustomResourceDefinitionList",
  "apiVersion": "apiextensions.k8s.io/v1",
  "metadata": {
    "resourceVersion": "1027"
  },
  "items": [
    {
      "metadata": {
        "name": "addons.k3s.cattle.io",
        "uid": "a2048ee7-b3c7-45ef-b128-1d0c24333b78",
        "resourceVersion": "212",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:15Z",
        "labels": {
          "objectset.rio.cattle.io/hash": "76092cd54ba63fc73cd7b8728426e6e5e7033ede"
        },
        "annotations": {
          "objectset.rio.cattle.io/applied": "H4sIAAAAAAAA/5ST34/TMAzH/xXk52wc6902KvFwAiEhpBPix14QD27ibaFpEsXJ7tDU/x25XQecdBP3aNf++Otv3CNgtBtKbIOHWgJ6yOQl5Hm75rkNLw+vQEFrvYEa3hbOoftMHErS9I621tssvQo6ymgwI9RHQO9DRvnAEobmJ+nMlOfJhrnGnB0J2QoS1JPfw72nNNsd2qelqRcfrTdvLui6DPfYkdCNGbAV/6n4r16OqAUAvQKdaNj5q+2IM3YRal+cU+CwIXfRiT3yHmpYLa9eL7S5uW5wWW31qtJm1axXi/X1YklLuqHVVVWRIZl2SXmvgCNpmbhLoUSo4fFqg3gpOL3srXBAQXQloTuDQQFbvysO05QTekzElA70zbc+3Pv3lpxhqLfomBSwDlG03U0GGVBwGK+Mof5+nMQPp8V6T91wNiGSv/30YVN9OadiCpFStqPWaamHWVsaSp4y8WzSMiujmNn2pCanQuJExlz4mW29gvxrWGJ8MpDMUG/GCuGGhDs6Nfz4ZxJqTTGTuXvk8t8GDycTvLGn/2S8FaGS2ZzNkmzf/w4AAP//r7lyxagDAAA",
          "objectset.rio.cattle.io/id": "",
          "objectset.rio.cattle.io/owner-gvk": "apiextensions.k8s.io/v1, Kind=CustomResourceDefinition",
          "objectset.rio.cattle.io/owner-name": "addons.k3s.cattle.io",
          "objectset.rio.cattle.io/owner-namespace": ""
        },
        "managedFields": [
          {
            "manager": "deploy@k3d-k3d-cluster-test-server-0",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:objectset.rio.cattle.io/applied": {},
                  "f:objectset.rio.cattle.io/id": {},
                  "f:objectset.rio.cattle.io/owner-gvk": {},
                  "f:objectset.rio.cattle.io/owner-name": {},
                  "f:objectset.rio.cattle.io/owner-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:objectset.rio.cattle.io/hash": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "k3s.cattle.io",
        "names": {
          "plural": "addons",
          "singular": "addon",
          "kind": "Addon",
          "listKind": "AddonList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "status": {
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:15Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:15Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "addons",
          "singular": "addon",
          "kind": "Addon",
          "listKind": "AddonList"
        },
        "storedVersions": [
          "v1"
        ]
      }
    },
    {
      "metadata": {
        "name": "helmcharts.helm.cattle.io",
        "uid": "00083ce6-0d2b-4bf8-8e93-38e6decc832c",
        "resourceVersion": "216",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:15Z",
        "labels": {
          "objectset.rio.cattle.io/hash": "29aa74e2abe5947484ef867c989a6921f51b1438"
        },
        "annotations": {
          "objectset.rio.cattle.io/applied": "H4sIAAAAAAAA/5RTTY/TMBD9K2jOblG73W0biQNahEBIK8RHL4jDxJk0Jo5teezuoir/HU2SLlukLXCLxzNv3nt+OQIGs6PIxjso5EAPiZwced5ueG78y8MCFLTGVVDAbebku0/EPkdNb6g2ziSZVdBRwgoTQnEEdM4nlAuWoy9/kE5MaR6Nn2tMyZIgG4EE9ey9v3cUZ/tD+zw19eKDcdWrC7wugzvsCApoyHa6wZh4Lp+/2/4JgANqQYFegY40CP9iOuKEXYDCZWsVWCzJXrSjQW6ggOUWcb2iJZZ0vV2tV5sV1Zubtd5utnizXS7q60W5WF1tZNtf6fcKOJCWtfvoc5iazwQOEqRjeuR3ZLtbQQMFweaI9mwFKGDj9tlifFqXVSESUzzQV9c6f+/eGrIVQ1GjZVLA2gdhe3eyrAIFhzF8DMW340nOkDjWDXVDmnwg9/rj+93V58dSiD5QTGbkfVL4MGtzSdFRIp6duMzySGZWT2xSzCS2JEyZ/3OsV5B+DiLGRwSpDP3V2CG4PuKepoHvZ5tQawqJqrs/HH9q9BAi7yoz/T5jegSVqt2jWVLt+18BAAD//32jWoG/AwAA",
          "objectset.rio.cattle.io/id": "",
          "objectset.rio.cattle.io/owner-gvk": "apiextensions.k8s.io/v1, Kind=CustomResourceDefinition",
          "objectset.rio.cattle.io/owner-name": "helmcharts.helm.cattle.io",
          "objectset.rio.cattle.io/owner-namespace": ""
        },
        "managedFields": [
          {
            "manager": "deploy@k3d-k3d-cluster-test-server-0",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:objectset.rio.cattle.io/applied": {},
                  "f:objectset.rio.cattle.io/id": {},
                  "f:objectset.rio.cattle.io/owner-gvk": {},
                  "f:objectset.rio.cattle.io/owner-name": {},
                  "f:objectset.rio.cattle.io/owner-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:objectset.rio.cattle.io/hash": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "helm.cattle.io",
        "names": {
          "plural": "helmcharts",
          "singular": "helmchart",
          "kind": "HelmChart",
          "listKind": "HelmChartList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "status": {
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:15Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:15Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "helmcharts",
          "singular": "helmchart",
          "kind": "HelmChart",
          "listKind": "HelmChartList"
        },
        "storedVersions": [
          "v1"
        ]
      }
    },
    {
      "metadata": {
        "name": "helmchartconfigs.helm.cattle.io",
        "uid": "6a965ea9-adbc-4135-b9a3-ab3fb9217ef5",
        "resourceVersion": "219",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:15Z",
        "labels": {
          "objectset.rio.cattle.io/hash": "2052208f1663688d05f513c2fa308fde31521d9d"
        },
        "annotations": {
          "objectset.rio.cattle.io/applied": "H4sIAAAAAAAA/5RTTY8TMQz9K8jntPRDrcpIHFARAiGtEB+9IA5u4mnDZJIoTrqLqvnvyDPThQW2Wo7xx7Pf88sZMNodJbbBQyUPusvk5cnTZsNTG56f5qCgsd5ABdvCObQfiUNJml5Tbb3N0qugpYwGM0J1BvQ+ZJQEyzPsv5POTHmabJhqzNmRIFuBBPVoPtx6SpPDqXl8NfXsvfXm5ZW9roN7bAkqOJJr9RFT1sHX9sBTCfwqfhIMR9SCBZ0Cnain/9m2xBnbCJUvzilwuCd3VZQj8hEqWMxWi8VsU8/X6+V6szGzVb2aL/WixuVsUxtazleLuXlhZNoTSXQKOJKW4YcUShxbHtDsiUjFePC35NqtYG57TFAQXUno/jEOFLD1h+Iw/Z2V4TERUzrRF9/4cOvfWHKGoarRMSlgHaKwuLlIaUDBabAmQ/X1fKHZ+5H1kdreayGSf/Xh3W756T4UU4iUsh2YXDjfTZqyp+QpE08uu0zKsMykHrfJqZAIlTEX/s+2TkH+0ZMYjgsS6evNUCG4IeGBxoZvDyah1hQzmZs/bvC76L25gjd2/FyDqwSVzO5eLIl23c8AAAD//y6EtavdAwAA",
          "objectset.rio.cattle.io/id": "",
          "objectset.rio.cattle.io/owner-gvk": "apiextensions.k8s.io/v1, Kind=CustomResourceDefinition",
          "objectset.rio.cattle.io/owner-name": "helmchartconfigs.helm.cattle.io",
          "objectset.rio.cattle.io/owner-namespace": ""
        },
        "managedFields": [
          {
            "manager": "deploy@k3d-k3d-cluster-test-server-0",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:objectset.rio.cattle.io/applied": {},
                  "f:objectset.rio.cattle.io/id": {},
                  "f:objectset.rio.cattle.io/owner-gvk": {},
                  "f:objectset.rio.cattle.io/owner-name": {},
                  "f:objectset.rio.cattle.io/owner-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:objectset.rio.cattle.io/hash": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "helm.cattle.io",
        "names": {
          "plural": "helmchartconfigs",
          "singular": "helmchartconfig",
          "kind": "HelmChartConfig",
          "listKind": "HelmChartConfigList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "status": {
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:15Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:15Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "helmchartconfigs",
          "singular": "helmchartconfig",
          "kind": "HelmChartConfig",
          "listKind": "HelmChartConfigList"
        },
        "storedVersions": [
          "v1"
        ]
      }
    },
    {
      "metadata": {
        "name": "ingressroutes.traefik.containo.us",
        "uid": "b2995a74-eecc-4e2e-9ca9-f6ed73c64147",
        "resourceVersion": "586",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "ingressroutes",
          "singular": "ingressroute",
          "kind": "IngressRoute",
          "listKind": "IngressRouteList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "IngressRoute is an Ingress CRD specification.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "IngressRouteSpec is a specification for a IngressRouteSpec resource.",
                    "type": "object",
                    "required": [
                      "routes"
                    ],
                    "properties": {
                      "entryPoints": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "routes": {
                        "type": "array",
                        "items": {
                          "description": "Route contains the set of routes.",
                          "type": "object",
                          "required": [
                            "kind",
                            "match"
                          ],
                          "properties": {
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Rule"
                              ]
                            },
                            "match": {
                              "type": "string"
                            },
                            "middlewares": {
                              "type": "array",
                              "items": {
                                "description": "MiddlewareRef is a ref to the Middleware resources.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "priority": {
                              "type": "integer"
                            },
                            "services": {
                              "type": "array",
                              "items": {
                                "description": "Service defines an upstream to proxy traffic.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Service",
                                      "TraefikService"
                                    ]
                                  },
                                  "name": {
                                    "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  },
                                  "passHostHeader": {
                                    "type": "boolean"
                                  },
                                  "port": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "responseForwarding": {
                                    "description": "ResponseForwarding holds configuration for the forward of the response.",
                                    "type": "object",
                                    "properties": {
                                      "flushInterval": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "scheme": {
                                    "type": "string"
                                  },
                                  "serversTransport": {
                                    "type": "string"
                                  },
                                  "sticky": {
                                    "description": "Sticky holds the sticky configuration.",
                                    "type": "object",
                                    "properties": {
                                      "cookie": {
                                        "description": "Cookie holds the sticky configuration based on cookie.",
                                        "type": "object",
                                        "properties": {
                                          "httpOnly": {
                                            "type": "boolean"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "sameSite": {
                                            "type": "string"
                                          },
                                          "secure": {
                                            "type": "boolean"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "strategy": {
                                    "type": "string"
                                  },
                                  "weight": {
                                    "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "tls": {
                        "description": "TLS contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                        "type": "object",
                        "properties": {
                          "certResolver": {
                            "type": "string"
                          },
                          "domains": {
                            "type": "array",
                            "items": {
                              "description": "Domain holds a domain name with SANs.",
                              "type": "object",
                              "properties": {
                                "main": {
                                  "type": "string"
                                },
                                "sans": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "options": {
                            "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              }
                            }
                          },
                          "secretName": {
                            "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                            "type": "string"
                          },
                          "store": {
                            "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "ingressroutes",
          "singular": "ingressroute",
          "kind": "IngressRoute",
          "listKind": "IngressRouteList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "middlewaretcps.traefik.containo.us",
        "uid": "74212904-b381-4ba2-8129-0cf6f9f2fc70",
        "resourceVersion": "590",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "middlewaretcps",
          "singular": "middlewaretcp",
          "kind": "MiddlewareTCP",
          "listKind": "MiddlewareTCPList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "MiddlewareTCP is a specification for a MiddlewareTCP resource.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "MiddlewareTCPSpec holds the MiddlewareTCP configuration.",
                    "type": "object",
                    "properties": {
                      "ipWhiteList": {
                        "description": "TCPIPWhiteList holds the TCP ip white list configuration.",
                        "type": "object",
                        "properties": {
                          "sourceRange": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "middlewaretcps",
          "singular": "middlewaretcp",
          "kind": "MiddlewareTCP",
          "listKind": "MiddlewareTCPList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "tlsoptions.traefik.containo.us",
        "uid": "1e0ea988-38ad-4b54-b035-73bee79d9c27",
        "resourceVersion": "592",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "tlsoptions",
          "singular": "tlsoption",
          "kind": "TLSOption",
          "listKind": "TLSOptionList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "TLSOption is a specification for a TLSOption resource.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "TLSOptionSpec configures TLS for an entry point.",
                    "type": "object",
                    "properties": {
                      "cipherSuites": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "clientAuth": {
                        "description": "ClientAuth defines the parameters of the client authentication part of the TLS connection, if any.",
                        "type": "object",
                        "properties": {
                          "clientAuthType": {
                            "description": "ClientAuthType defines the client authentication type to apply.",
                            "type": "string",
                            "enum": [
                              "NoClientCert",
                              "RequestClientCert",
                              "VerifyClientCertIfGiven",
                              "RequireAndVerifyClientCert"
                            ]
                          },
                          "secretNames": {
                            "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "curvePreferences": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "maxVersion": {
                        "type": "string"
                      },
                      "minVersion": {
                        "type": "string"
                      },
                      "preferServerCipherSuites": {
                        "type": "boolean"
                      },
                      "sniStrict": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "tlsoptions",
          "singular": "tlsoption",
          "kind": "TLSOption",
          "listKind": "TLSOptionList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "tlsstores.traefik.containo.us",
        "uid": "55e6fcc2-5ae2-44b2-8f52-19ddddaf676f",
        "resourceVersion": "593",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "tlsstores",
          "singular": "tlsstore",
          "kind": "TLSStore",
          "listKind": "TLSStoreList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "TLSStore is a specification for a TLSStore resource.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "TLSStoreSpec configures a TLSStore resource.",
                    "type": "object",
                    "required": [
                      "defaultCertificate"
                    ],
                    "properties": {
                      "defaultCertificate": {
                        "description": "DefaultCertificate holds a secret name for the TLSOption resource.",
                        "type": "object",
                        "required": [
                          "secretName"
                        ],
                        "properties": {
                          "secretName": {
                            "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "tlsstores",
          "singular": "tlsstore",
          "kind": "TLSStore",
          "listKind": "TLSStoreList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "serverstransports.traefik.containo.us",
        "uid": "d6063bb5-95ea-4ee2-81b7-83f19e52e7ae",
        "resourceVersion": "595",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "serverstransports",
          "singular": "serverstransport",
          "kind": "ServersTransport",
          "listKind": "ServersTransportList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "ServersTransport is a specification for a ServersTransport resource.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "ServersTransportSpec options to configure communication between Traefik and the servers.",
                    "type": "object",
                    "properties": {
                      "certificatesSecrets": {
                        "description": "Certificates for mTLS.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "disableHTTP2": {
                        "description": "Disable HTTP/2 for connections with backend servers.",
                        "type": "boolean"
                      },
                      "forwardingTimeouts": {
                        "description": "Timeouts for requests forwarded to the backend servers.",
                        "type": "object",
                        "properties": {
                          "dialTimeout": {
                            "description": "The amount of time to wait until a connection to a backend server can be established. If zero, no timeout exists.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "idleConnTimeout": {
                            "description": "The maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "responseHeaderTimeout": {
                            "description": "The amount of time to wait for a server's response headers after fully writing the request (including its body, if any). If zero, no timeout exists.",
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "insecureSkipVerify": {
                        "description": "Disable SSL certificate verification.",
                        "type": "boolean"
                      },
                      "maxIdleConnsPerHost": {
                        "description": "If non-zero, controls the maximum idle (keep-alive) to keep per-host. If zero, DefaultMaxIdleConnsPerHost is used.",
                        "type": "integer"
                      },
                      "rootCAsSecrets": {
                        "description": "Add cert file for self-signed certificate.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "serverName": {
                        "description": "ServerName used to contact the server.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "serverstransports",
          "singular": "serverstransport",
          "kind": "ServersTransport",
          "listKind": "ServersTransportList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "ingressroutetcps.traefik.containo.us",
        "uid": "0cd6ffce-9e38-4a74-beec-261831e3d47c",
        "resourceVersion": "597",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "ingressroutetcps",
          "singular": "ingressroutetcp",
          "kind": "IngressRouteTCP",
          "listKind": "IngressRouteTCPList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "IngressRouteTCP is an Ingress CRD specification.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "IngressRouteTCPSpec is a specification for a IngressRouteTCPSpec resource.",
                    "type": "object",
                    "required": [
                      "routes"
                    ],
                    "properties": {
                      "entryPoints": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "routes": {
                        "type": "array",
                        "items": {
                          "description": "RouteTCP contains the set of routes.",
                          "type": "object",
                          "required": [
                            "match"
                          ],
                          "properties": {
                            "match": {
                              "type": "string"
                            },
                            "middlewares": {
                              "description": "Middlewares contains references to MiddlewareTCP resources.",
                              "type": "array",
                              "items": {
                                "description": "ObjectReference is a generic reference to a Traefik resource.",
                                "type": "object",
                                "required": [
                                  "name"
                                ],
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "services": {
                              "type": "array",
                              "items": {
                                "description": "ServiceTCP defines an upstream to proxy traffic.",
                                "type": "object",
                                "required": [
                                  "name",
                                  "port"
                                ],
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "proxyProtocol": {
                                    "description": "ProxyProtocol holds the ProxyProtocol configuration.",
                                    "type": "object",
                                    "properties": {
                                      "version": {
                                        "type": "integer"
                                      }
                                    }
                                  },
                                  "terminationDelay": {
                                    "type": "integer"
                                  },
                                  "weight": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "tls": {
                        "description": "TLSTCP contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: \n \t tls: {} # inline format \n \t tls: \t   secretName: # block format",
                        "type": "object",
                        "properties": {
                          "certResolver": {
                            "type": "string"
                          },
                          "domains": {
                            "type": "array",
                            "items": {
                              "description": "Domain holds a domain name with SANs.",
                              "type": "object",
                              "properties": {
                                "main": {
                                  "type": "string"
                                },
                                "sans": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "options": {
                            "description": "Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              }
                            }
                          },
                          "passthrough": {
                            "type": "boolean"
                          },
                          "secretName": {
                            "description": "SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.",
                            "type": "string"
                          },
                          "store": {
                            "description": "Store is a reference to a TLSStore, that specifies the parameters of the TLS store.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "ingressroutetcps",
          "singular": "ingressroutetcp",
          "kind": "IngressRouteTCP",
          "listKind": "IngressRouteTCPList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "middlewares.traefik.containo.us",
        "uid": "98ce5de9-fb86-4c65-8022-2a5a0603d4a4",
        "resourceVersion": "599",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "middlewares",
          "singular": "middleware",
          "kind": "Middleware",
          "listKind": "MiddlewareList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "Middleware is a specification for a Middleware resource.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "MiddlewareSpec holds the Middleware configuration.",
                    "type": "object",
                    "properties": {
                      "addPrefix": {
                        "description": "AddPrefix holds the AddPrefix configuration.",
                        "type": "object",
                        "properties": {
                          "prefix": {
                            "type": "string"
                          }
                        }
                      },
                      "basicAuth": {
                        "description": "BasicAuth holds the HTTP basic authentication configuration.",
                        "type": "object",
                        "properties": {
                          "headerField": {
                            "type": "string"
                          },
                          "realm": {
                            "type": "string"
                          },
                          "removeHeader": {
                            "type": "boolean"
                          },
                          "secret": {
                            "type": "string"
                          }
                        }
                      },
                      "buffering": {
                        "description": "Buffering holds the request/response buffering configuration.",
                        "type": "object",
                        "properties": {
                          "maxRequestBodyBytes": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "maxResponseBodyBytes": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "memRequestBodyBytes": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "memResponseBodyBytes": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "retryExpression": {
                            "type": "string"
                          }
                        }
                      },
                      "chain": {
                        "description": "Chain holds a chain of middlewares.",
                        "type": "object",
                        "properties": {
                          "middlewares": {
                            "type": "array",
                            "items": {
                              "description": "MiddlewareRef is a ref to the Middleware resources.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "circuitBreaker": {
                        "description": "CircuitBreaker holds the circuit breaker configuration.",
                        "type": "object",
                        "properties": {
                          "expression": {
                            "type": "string"
                          }
                        }
                      },
                      "compress": {
                        "description": "Compress holds the compress configuration.",
                        "type": "object",
                        "properties": {
                          "excludedContentTypes": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "contentType": {
                        "description": "ContentType middleware - or rather its unique `autoDetect` option - specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.",
                        "type": "object",
                        "properties": {
                          "autoDetect": {
                            "type": "boolean"
                          }
                        }
                      },
                      "digestAuth": {
                        "description": "DigestAuth holds the Digest HTTP authentication configuration.",
                        "type": "object",
                        "properties": {
                          "headerField": {
                            "type": "string"
                          },
                          "realm": {
                            "type": "string"
                          },
                          "removeHeader": {
                            "type": "boolean"
                          },
                          "secret": {
                            "type": "string"
                          }
                        }
                      },
                      "errors": {
                        "description": "ErrorPage holds the custom error page configuration.",
                        "type": "object",
                        "properties": {
                          "query": {
                            "type": "string"
                          },
                          "service": {
                            "description": "Service defines an upstream to proxy traffic.",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Service",
                                  "TraefikService"
                                ]
                              },
                              "name": {
                                "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              },
                              "passHostHeader": {
                                "type": "boolean"
                              },
                              "port": {
                                "anyOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "string"
                                  }
                                ],
                                "x-kubernetes-int-or-string": true
                              },
                              "responseForwarding": {
                                "description": "ResponseForwarding holds configuration for the forward of the response.",
                                "type": "object",
                                "properties": {
                                  "flushInterval": {
                                    "type": "string"
                                  }
                                }
                              },
                              "scheme": {
                                "type": "string"
                              },
                              "serversTransport": {
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Sticky holds the sticky configuration.",
                                "type": "object",
                                "properties": {
                                  "cookie": {
                                    "description": "Cookie holds the sticky configuration based on cookie.",
                                    "type": "object",
                                    "properties": {
                                      "httpOnly": {
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "sameSite": {
                                        "type": "string"
                                      },
                                      "secure": {
                                        "type": "boolean"
                                      }
                                    }
                                  }
                                }
                              },
                              "strategy": {
                                "type": "string"
                              },
                              "weight": {
                                "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                "type": "integer"
                              }
                            }
                          },
                          "status": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "forwardAuth": {
                        "description": "ForwardAuth holds the http forward authentication configuration.",
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "authRequestHeaders": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "authResponseHeaders": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "authResponseHeadersRegex": {
                            "type": "string"
                          },
                          "tls": {
                            "description": "ClientTLS holds TLS specific configurations as client.",
                            "type": "object",
                            "properties": {
                              "caOptional": {
                                "type": "boolean"
                              },
                              "caSecret": {
                                "type": "string"
                              },
                              "certSecret": {
                                "type": "string"
                              },
                              "insecureSkipVerify": {
                                "type": "boolean"
                              }
                            }
                          },
                          "trustForwardHeader": {
                            "type": "boolean"
                          }
                        }
                      },
                      "headers": {
                        "description": "Headers holds the custom header configuration.",
                        "type": "object",
                        "properties": {
                          "accessControlAllowCredentials": {
                            "description": "AccessControlAllowCredentials is only valid if true. false is ignored.",
                            "type": "boolean"
                          },
                          "accessControlAllowHeaders": {
                            "description": "AccessControlAllowHeaders must be used in response to a preflight request with Access-Control-Request-Headers set.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "accessControlAllowMethods": {
                            "description": "AccessControlAllowMethods must be used in response to a preflight request with Access-Control-Request-Method set.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "accessControlAllowOriginList": {
                            "description": "AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin \"*\".",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "accessControlAllowOriginListRegex": {
                            "description": "AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "accessControlExposeHeaders": {
                            "description": "AccessControlExposeHeaders sets valid headers for the response.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "accessControlMaxAge": {
                            "description": "AccessControlMaxAge sets the time that a preflight request may be cached.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "addVaryHeader": {
                            "description": "AddVaryHeader controls if the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.",
                            "type": "boolean"
                          },
                          "allowedHosts": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "browserXssFilter": {
                            "type": "boolean"
                          },
                          "contentSecurityPolicy": {
                            "type": "string"
                          },
                          "contentTypeNosniff": {
                            "type": "boolean"
                          },
                          "customBrowserXSSValue": {
                            "type": "string"
                          },
                          "customFrameOptionsValue": {
                            "type": "string"
                          },
                          "customRequestHeaders": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "customResponseHeaders": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "featurePolicy": {
                            "type": "string"
                          },
                          "forceSTSHeader": {
                            "type": "boolean"
                          },
                          "frameDeny": {
                            "type": "boolean"
                          },
                          "hostsProxyHeaders": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "isDevelopment": {
                            "type": "boolean"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "referrerPolicy": {
                            "type": "string"
                          },
                          "sslForceHost": {
                            "description": "Deprecated: use RedirectRegex instead.",
                            "type": "boolean"
                          },
                          "sslHost": {
                            "description": "Deprecated: use RedirectRegex instead.",
                            "type": "string"
                          },
                          "sslProxyHeaders": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "sslRedirect": {
                            "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                            "type": "boolean"
                          },
                          "sslTemporaryRedirect": {
                            "description": "Deprecated: use EntryPoint redirection or RedirectScheme instead.",
                            "type": "boolean"
                          },
                          "stsIncludeSubdomains": {
                            "type": "boolean"
                          },
                          "stsPreload": {
                            "type": "boolean"
                          },
                          "stsSeconds": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      "inFlightReq": {
                        "description": "InFlightReq limits the number of requests being processed and served concurrently.",
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "sourceCriterion": {
                            "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                            "type": "object",
                            "properties": {
                              "ipStrategy": {
                                "description": "IPStrategy holds the ip strategy configuration.",
                                "type": "object",
                                "properties": {
                                  "depth": {
                                    "type": "integer"
                                  },
                                  "excludedIPs": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "requestHeaderName": {
                                "type": "string"
                              },
                              "requestHost": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "ipWhiteList": {
                        "description": "IPWhiteList holds the ip white list configuration.",
                        "type": "object",
                        "properties": {
                          "ipStrategy": {
                            "description": "IPStrategy holds the ip strategy configuration.",
                            "type": "object",
                            "properties": {
                              "depth": {
                                "type": "integer"
                              },
                              "excludedIPs": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "sourceRange": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "passTLSClientCert": {
                        "description": "PassTLSClientCert holds the TLS client cert headers configuration.",
                        "type": "object",
                        "properties": {
                          "info": {
                            "description": "TLSClientCertificateInfo holds the client TLS certificate info configuration.",
                            "type": "object",
                            "properties": {
                              "issuer": {
                                "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                "type": "object",
                                "properties": {
                                  "commonName": {
                                    "type": "boolean"
                                  },
                                  "country": {
                                    "type": "boolean"
                                  },
                                  "domainComponent": {
                                    "type": "boolean"
                                  },
                                  "locality": {
                                    "type": "boolean"
                                  },
                                  "organization": {
                                    "type": "boolean"
                                  },
                                  "province": {
                                    "type": "boolean"
                                  },
                                  "serialNumber": {
                                    "type": "boolean"
                                  }
                                }
                              },
                              "notAfter": {
                                "type": "boolean"
                              },
                              "notBefore": {
                                "type": "boolean"
                              },
                              "sans": {
                                "type": "boolean"
                              },
                              "serialNumber": {
                                "type": "boolean"
                              },
                              "subject": {
                                "description": "TLSCLientCertificateDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739",
                                "type": "object",
                                "properties": {
                                  "commonName": {
                                    "type": "boolean"
                                  },
                                  "country": {
                                    "type": "boolean"
                                  },
                                  "domainComponent": {
                                    "type": "boolean"
                                  },
                                  "locality": {
                                    "type": "boolean"
                                  },
                                  "organization": {
                                    "type": "boolean"
                                  },
                                  "province": {
                                    "type": "boolean"
                                  },
                                  "serialNumber": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "pem": {
                            "type": "boolean"
                          }
                        }
                      },
                      "plugin": {
                        "type": "object",
                        "additionalProperties": {
                          "x-kubernetes-preserve-unknown-fields": true
                        }
                      },
                      "rateLimit": {
                        "description": "RateLimit holds the rate limiting configuration for a given router.",
                        "type": "object",
                        "properties": {
                          "average": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "burst": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "period": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "sourceCriterion": {
                            "description": "SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.",
                            "type": "object",
                            "properties": {
                              "ipStrategy": {
                                "description": "IPStrategy holds the ip strategy configuration.",
                                "type": "object",
                                "properties": {
                                  "depth": {
                                    "type": "integer"
                                  },
                                  "excludedIPs": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "requestHeaderName": {
                                "type": "string"
                              },
                              "requestHost": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      },
                      "redirectRegex": {
                        "description": "RedirectRegex holds the redirection configuration.",
                        "type": "object",
                        "properties": {
                          "permanent": {
                            "type": "boolean"
                          },
                          "regex": {
                            "type": "string"
                          },
                          "replacement": {
                            "type": "string"
                          }
                        }
                      },
                      "redirectScheme": {
                        "description": "RedirectScheme holds the scheme redirection configuration.",
                        "type": "object",
                        "properties": {
                          "permanent": {
                            "type": "boolean"
                          },
                          "port": {
                            "type": "string"
                          },
                          "scheme": {
                            "type": "string"
                          }
                        }
                      },
                      "replacePath": {
                        "description": "ReplacePath holds the ReplacePath configuration.",
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string"
                          }
                        }
                      },
                      "replacePathRegex": {
                        "description": "ReplacePathRegex holds the ReplacePathRegex configuration.",
                        "type": "object",
                        "properties": {
                          "regex": {
                            "type": "string"
                          },
                          "replacement": {
                            "type": "string"
                          }
                        }
                      },
                      "retry": {
                        "description": "Retry holds the retry configuration.",
                        "type": "object",
                        "properties": {
                          "attempts": {
                            "type": "integer"
                          },
                          "initialInterval": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "stripPrefix": {
                        "description": "StripPrefix holds the StripPrefix configuration.",
                        "type": "object",
                        "properties": {
                          "forceSlash": {
                            "type": "boolean"
                          },
                          "prefixes": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "stripPrefixRegex": {
                        "description": "StripPrefixRegex holds the StripPrefixRegex configuration.",
                        "type": "object",
                        "properties": {
                          "regex": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "middlewares",
          "singular": "middleware",
          "kind": "Middleware",
          "listKind": "MiddlewareList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "traefikservices.traefik.containo.us",
        "uid": "d0222aff-110c-4a09-9cfc-0abf588ecdcf",
        "resourceVersion": "600",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "traefikservices",
          "singular": "traefikservice",
          "kind": "TraefikService",
          "listKind": "TraefikServiceList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "TraefikService is the specification for a service (that an IngressRoute refers to) that is usually not a terminal service (i.e. not a pod of servers), as opposed to a Kubernetes Service. That is to say, it usually refers to other (children) services, which themselves can be TraefikServices or Services.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "ServiceSpec defines whether a TraefikService is a load-balancer of services or a mirroring service.",
                    "type": "object",
                    "properties": {
                      "mirroring": {
                        "description": "Mirroring defines a mirroring service, which is composed of a main load-balancer, and a list of mirrors.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Service",
                              "TraefikService"
                            ]
                          },
                          "maxBodySize": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "mirrors": {
                            "type": "array",
                            "items": {
                              "description": "MirrorService defines one of the mirrors of a Mirroring service.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Service",
                                    "TraefikService"
                                  ]
                                },
                                "name": {
                                  "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                },
                                "passHostHeader": {
                                  "type": "boolean"
                                },
                                "percent": {
                                  "type": "integer"
                                },
                                "port": {
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "responseForwarding": {
                                  "description": "ResponseForwarding holds configuration for the forward of the response.",
                                  "type": "object",
                                  "properties": {
                                    "flushInterval": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "scheme": {
                                  "type": "string"
                                },
                                "serversTransport": {
                                  "type": "string"
                                },
                                "sticky": {
                                  "description": "Sticky holds the sticky configuration.",
                                  "type": "object",
                                  "properties": {
                                    "cookie": {
                                      "description": "Cookie holds the sticky configuration based on cookie.",
                                      "type": "object",
                                      "properties": {
                                        "httpOnly": {
                                          "type": "boolean"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "sameSite": {
                                          "type": "string"
                                        },
                                        "secure": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                },
                                "strategy": {
                                  "type": "string"
                                },
                                "weight": {
                                  "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "name": {
                            "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          },
                          "passHostHeader": {
                            "type": "boolean"
                          },
                          "port": {
                            "anyOf": [
                              {
                                "type": "integer"
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "x-kubernetes-int-or-string": true
                          },
                          "responseForwarding": {
                            "description": "ResponseForwarding holds configuration for the forward of the response.",
                            "type": "object",
                            "properties": {
                              "flushInterval": {
                                "type": "string"
                              }
                            }
                          },
                          "scheme": {
                            "type": "string"
                          },
                          "serversTransport": {
                            "type": "string"
                          },
                          "sticky": {
                            "description": "Sticky holds the sticky configuration.",
                            "type": "object",
                            "properties": {
                              "cookie": {
                                "description": "Cookie holds the sticky configuration based on cookie.",
                                "type": "object",
                                "properties": {
                                  "httpOnly": {
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "sameSite": {
                                    "type": "string"
                                  },
                                  "secure": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "strategy": {
                            "type": "string"
                          },
                          "weight": {
                            "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                            "type": "integer"
                          }
                        }
                      },
                      "weighted": {
                        "description": "WeightedRoundRobin defines a load-balancer of services.",
                        "type": "object",
                        "properties": {
                          "services": {
                            "type": "array",
                            "items": {
                              "description": "Service defines an upstream to proxy traffic.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Service",
                                    "TraefikService"
                                  ]
                                },
                                "name": {
                                  "description": "Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.",
                                  "type": "string"
                                },
                                "namespace": {
                                  "type": "string"
                                },
                                "passHostHeader": {
                                  "type": "boolean"
                                },
                                "port": {
                                  "anyOf": [
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "x-kubernetes-int-or-string": true
                                },
                                "responseForwarding": {
                                  "description": "ResponseForwarding holds configuration for the forward of the response.",
                                  "type": "object",
                                  "properties": {
                                    "flushInterval": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "scheme": {
                                  "type": "string"
                                },
                                "serversTransport": {
                                  "type": "string"
                                },
                                "sticky": {
                                  "description": "Sticky holds the sticky configuration.",
                                  "type": "object",
                                  "properties": {
                                    "cookie": {
                                      "description": "Cookie holds the sticky configuration based on cookie.",
                                      "type": "object",
                                      "properties": {
                                        "httpOnly": {
                                          "type": "boolean"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "sameSite": {
                                          "type": "string"
                                        },
                                        "secure": {
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                },
                                "strategy": {
                                  "type": "string"
                                },
                                "weight": {
                                  "description": "Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).",
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "sticky": {
                            "description": "Sticky holds the sticky configuration.",
                            "type": "object",
                            "properties": {
                              "cookie": {
                                "description": "Cookie holds the sticky configuration based on cookie.",
                                "type": "object",
                                "properties": {
                                  "httpOnly": {
                                    "type": "boolean"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "sameSite": {
                                    "type": "string"
                                  },
                                  "secure": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "traefikservices",
          "singular": "traefikservice",
          "kind": "TraefikService",
          "listKind": "TraefikServiceList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    },
    {
      "metadata": {
        "name": "ingressrouteudps.traefik.containo.us",
        "uid": "9c5c45de-1d52-4696-a6a4-d613a8130ccd",
        "resourceVersion": "601",
        "generation": 1,
        "creationTimestamp": "2021-12-11T21:00:49Z",
        "labels": {
          "app.kubernetes.io/managed-by": "Helm"
        },
        "annotations": {
          "controller-gen.kubebuilder.io/version": "v0.4.1",
          "meta.helm.sh/release-name": "traefik-crd",
          "meta.helm.sh/release-namespace": "kube-system"
        },
        "managedFields": [
          {
            "manager": "helm",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:controller-gen.kubebuilder.io/version": {},
                  "f:meta.helm.sh/release-name": {},
                  "f:meta.helm.sh/release-namespace": {}
                },
                "f:labels": {
                  ".": {},
                  "f:app.kubernetes.io/managed-by": {}
                }
              },
              "f:spec": {
                "f:conversion": {
                  ".": {},
                  "f:strategy": {}
                },
                "f:group": {},
                "f:names": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:scope": {},
                "f:versions": {}
              }
            }
          },
          {
            "manager": "k3s",
            "operation": "Update",
            "apiVersion": "apiextensions.k8s.io/v1",
            "time": "2021-12-11T21:00:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:acceptedNames": {
                  "f:kind": {},
                  "f:listKind": {},
                  "f:plural": {},
                  "f:singular": {}
                },
                "f:conditions": {
                  "k:{\"type\":\"Established\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"NamesAccepted\"}": {
                    ".": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                }
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "group": "traefik.containo.us",
        "names": {
          "plural": "ingressrouteudps",
          "singular": "ingressrouteudp",
          "kind": "IngressRouteUDP",
          "listKind": "IngressRouteUDPList"
        },
        "scope": "Namespaced",
        "versions": [
          {
            "name": "v1alpha1",
            "served": true,
            "storage": true,
            "schema": {
              "openAPIV3Schema": {
                "description": "IngressRouteUDP is an Ingress CRD specification.",
                "type": "object",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  },
                  "spec": {
                    "description": "IngressRouteUDPSpec is a specification for a IngressRouteUDPSpec resource.",
                    "type": "object",
                    "required": [
                      "routes"
                    ],
                    "properties": {
                      "entryPoints": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "routes": {
                        "type": "array",
                        "items": {
                          "description": "RouteUDP contains the set of routes.",
                          "type": "object",
                          "properties": {
                            "services": {
                              "type": "array",
                              "items": {
                                "description": "ServiceUDP defines an upstream to proxy traffic.",
                                "type": "object",
                                "required": [
                                  "name",
                                  "port"
                                ],
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "namespace": {
                                    "type": "string"
                                  },
                                  "port": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ],
                                    "x-kubernetes-int-or-string": true
                                  },
                                  "weight": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "conversion": {
          "strategy": "None"
        }
      },
      "status": {
        "conditions": [
          {
            "type": "NamesAccepted",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "NoConflicts",
            "message": "no conflicts found"
          },
          {
            "type": "Established",
            "status": "True",
            "lastTransitionTime": "2021-12-11T21:00:49Z",
            "reason": "InitialNamesAccepted",
            "message": "the initial names have been accepted"
          }
        ],
        "acceptedNames": {
          "plural": "ingressrouteudps",
          "singular": "ingressrouteudp",
          "kind": "IngressRouteUDP",
          "listKind": "IngressRouteUDPList"
        },
        "storedVersions": [
          "v1alpha1"
        ]
      }
    }
  ]
}